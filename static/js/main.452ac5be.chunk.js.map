{"version":3,"sources":["components/ToDoForm.module.css","components/Todo.module.css","App.module.css","components/ShowInstructions.module.css","components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","components/ShowInstructions.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["module","exports","TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","styles","form","onSubmit","e","preventDefault","trim","uuid","v4","TextField","label","type","name","value","onChange","target","input","addtask","Button","disabled","Todo","toggleComplete","deleteTodo","isHovering","setIsHovering","ListItem","listitem","onMouseEnter","onMouseLeave","Checkbox","checked","onClick","Typography","taskcontent","style","textDecoration","IconButton","close","TodoList","todos","List","map","ShowInstructions","instruction","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","app","header","variant","content","length","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.452ac5be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ToDoForm_form__14r-O\",\"input\":\"ToDoForm_input__2A8wr\",\"addtask\":\"ToDoForm_addtask__2BaS4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listitem\":\"Todo_listitem__3rC4x\",\"taskcontent\":\"Todo_taskcontent__3swGu\",\"close\":\"Todo_close__3xNI5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"instruction\":\"ShowInstructions_instruction__22GOH\"};","import React, { useState } from 'react';\nimport uuid from 'uuid';\nimport { TextField, Button } from \"@material-ui/core\";\nimport styles from './ToDoForm.module.css';\n\nfunction TodoForm({ addTodo }) {\n  const [todo, setTodo] = useState({\n    id: \"\",\n    task: \"\",\n    completed: false\n  });\n\n  function handleTaskInputChange(e) {\n    setTodo({ ...todo, task: e.target.value });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (todo.task.trim()) {\n      addTodo({ ...todo, id: uuid.v4() });\n      setTodo({ ...todo, task: \"\" });\n    }\n  }\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <TextField\n        label=\"What needs to be done ?\"\n        type=\"text\"\n        name=\"task\"\n        value={todo.task}\n        onChange={handleTaskInputChange}\n        className={styles.input}\n      />\n      <div className={styles.addtask}>\n        <Button disabled={!todo.task} type=\"submit\">Add Task</Button>\n      </div>\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport styles from './Todo.module.css';\n\nfunction Todo({ todo, toggleComplete, deleteTodo }) {\n  const [isHovering, setIsHovering] = useState(false);\n\n  function handleCheckboxClick() {\n    toggleComplete(todo.id);\n  }\n  function handleDeleteClick() {\n    deleteTodo(todo.id);\n  }\n\n  function handleMouseEnter() {\n    setIsHovering(true);\n  }\n\n  function handleMouseLeave() {\n    setIsHovering(false);\n  }\n\n  return (\n    <ListItem\n      className={styles.listitem}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Checkbox\n        checked={todo.completed}\n        onClick={handleCheckboxClick}\n      />\n\n      <Typography\n        className={styles.taskcontent}\n        style={{\n          textDecoration: todo.completed ? \"line-through\" : null\n        }}\n      >\n        {todo.task}\n      </Typography>\n\n      {isHovering &&\n        <IconButton className={styles.close} onClick={handleDeleteClick}>\n          <CloseIcon />\n        </IconButton>\n      }\n    </ListItem>\n  );\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\nimport { List } from \"@material-ui/core\";\n\nfunction TodoList({ todos, toggleComplete, deleteTodo }) {\n  return (\n    <List>\n      {todos.map(todo => (\n        <Todo key={todo.id} todo={todo} toggleComplete={toggleComplete} deleteTodo={deleteTodo} />\n      ))}\n    </List>\n  )\n}\n\nexport default TodoList;\n","import React from 'react';\nimport { Typography } from \"@material-ui/core\";\n\nimport styles from './ShowInstructions.module.css';\n\n\nfunction ShowInstructions() {\n  return (\n    <>\n      <Typography\n        className={styles.instruction}\n      >\n        ✍️\n        Just type in above box and press enter to start saving ToDos!\n        ✍️\n      </Typography>\n    </>\n  );\n}\n\nexport default ShowInstructions;\n","import React, { useEffect, useState } from 'react';\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from './components/TodoList';\nimport ShowInstructions from './components/ShowInstructions';\nimport Typography from '@material-ui/core/Typography';\nimport styles from \"./App.module.css\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = (todo) => {\n    setTodos([todo, ...todos]);\n  }\n\n  const toggleComplete = (id) => {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed\n        };\n      }\n      return todo;\n    })\n    )\n  }\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.header}>\n        <Typography variant=\"h1\">\n          React ToDo\n        </Typography>\n      </div>\n\n      <div className={styles.content}>\n        <TodoForm addTodo={addTodo} />\n\n        {todos.length > 0 ?\n          <TodoList\n            todos={todos}\n            toggleComplete={toggleComplete}\n            deleteTodo={deleteTodo}\n          />\n          : <ShowInstructions />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}